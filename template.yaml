AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Lambda to Firehose to S3 with different compression formats

Parameters:
  SystemName:
    Type: String
    Default: aws
  EnvName:
    Type: String
    Default: test

Resources:
  #================================#
  # S3バケット
  #================================#

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${SystemName}-${EnvName}-data-bucket-${AWS::AccountId}

  #================================#
  # Lambda実行ロール
  #================================#

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${SystemName}-${EnvName}-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - firehose:DeleteDeliveryStream
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:UpdateDestination
                Resource:
                  - !GetAtt GzipFirehoseStream.Arn
                  - !GetAtt SnappyFirehoseStream.Arn
                  - !GetAtt ZipFirehoseStream.Arn
                  - !GetAtt HadoopSnappyFirehoseStream.Arn
                  - !GetAtt NoCompressionFirehoseStream.Arn

  #================================#
  # Firehoseサービスロール
  #================================#

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${SystemName}-${EnvName}-firehose-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub "${DataBucket.Arn}/*"

  #================================#
  # 圧縮なしのFirehoseストリーム
  #================================#

  NoCompressionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${SystemName}-${EnvName}-no-compression-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: no-compression/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: error/no-compression/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        CustomTimeZone: Asia/Tokyo
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref NoCompressionFirehoseCloudWatchLogGroup
          LogStreamName: !Ref NoCompressionFirehoseCloudWatchLogStream

  NoCompressionFirehoseCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/datafirehose/${SystemName}-${EnvName}-no-compression-stream-logs
      RetentionInDays: 1

  NoCompressionFirehoseCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref NoCompressionFirehoseCloudWatchLogGroup
      LogStreamName: !Sub ${SystemName}-${EnvName}-no-compression-stream-log-stream

  #================================#
  # GZIP圧縮のFirehoseストリーム
  #================================#

  GzipFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${SystemName}-${EnvName}-gzip-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
        CompressionFormat: GZIP
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: gzip/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: error/gzip/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        CustomTimeZone: Asia/Tokyo
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref GzipFirehoseCloudWatchLogGroup
          LogStreamName: !Ref GzipFirehoseCloudWatchLogStream

  GzipFirehoseCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/datafirehose/${SystemName}-${EnvName}-gzip-stream-logs
      RetentionInDays: 1

  GzipFirehoseCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref GzipFirehoseCloudWatchLogGroup
      LogStreamName: !Sub ${SystemName}-${EnvName}-gzip-stream-log-stream

  #================================#
  # ZIP圧縮のFirehoseストリーム
  #================================#
  ZipFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${SystemName}-${EnvName}-zip-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
        CompressionFormat: ZIP
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: zip/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: error/zip/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        CustomTimeZone: Asia/Tokyo
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref ZipFirehoseCloudWatchLogGroup
          LogStreamName: !Ref ZipFirehoseCloudWatchLogStream

  ZipFirehoseCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/datafirehose/${SystemName}-${EnvName}-zip-stream-logs
      RetentionInDays: 1

  ZipFirehoseCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref ZipFirehoseCloudWatchLogGroup
      LogStreamName: !Sub ${SystemName}-${EnvName}-zip-stream-log-stream

  #================================#
  # Snappy圧縮のFirehoseストリーム
  #================================#

  SnappyFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${SystemName}-${EnvName}-snappy-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
        CompressionFormat: Snappy
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: snappy/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: error/snappy/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        CustomTimeZone: Asia/Tokyo
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref SnappyFirehoseCloudWatchLogGroup
          LogStreamName: !Ref SnappyFirehoseCloudWatchLogStream

  SnappyFirehoseCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/datafirehose/${SystemName}-${EnvName}-snappy-stream-logs
      RetentionInDays: 1

  SnappyFirehoseCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref SnappyFirehoseCloudWatchLogGroup
      LogStreamName: !Sub ${SystemName}-${EnvName}-snappy-stream-log-stream

  #=============================================#
  # Hadoop互換Snappy圧縮のFirehoseストリーム
  #=============================================#
  HadoopSnappyFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${SystemName}-${EnvName}-hadoop-snappy-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
        CompressionFormat: HADOOP_SNAPPY
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: hadoop-snappy/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: error/hadoop-snappy/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        CustomTimeZone: Asia/Tokyo
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref HadoopSnappyFirehoseCloudWatchLogGroup
          LogStreamName: !Ref HadoopSnappyFirehoseCloudWatchLogStream

  HadoopSnappyFirehoseCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/datafirehose/${SystemName}-${EnvName}-hadoop-snappy-stream-logs
      RetentionInDays: 1

  HadoopSnappyFirehoseCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref HadoopSnappyFirehoseCloudWatchLogGroup
      LogStreamName: !Sub ${SystemName}-${EnvName}-hadoop-snappy-stream-log-stream

  #================================#
  # データ生成と送信を行うLambda関数
  #================================#

  DataGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${SystemName}-${EnvName}-data-generator-function
      CodeUri: ./src/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GZIP_STREAM: !Ref GzipFirehoseStream
          SNAPPY_STREAM: !Ref SnappyFirehoseStream
          ZIP_STREAM: !Ref ZipFirehoseStream
          HADOOP_SNAPPY_STREAM: !Ref HadoopSnappyFirehoseStream
          NO_COMPRESSION_STREAM: !Ref NoCompressionFirehoseStream
